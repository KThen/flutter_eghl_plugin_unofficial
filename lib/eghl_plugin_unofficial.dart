import 'dart:async';
import 'dart:io';

import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:intl/intl.dart';

class Eghlpluginunofficial {
  static const MethodChannel _channel =
      const MethodChannel('eghl_plugin_unofficial');

  static Future<String> makePayment({
    @required String serviceId,
    @required double amount,
    @required String merchantName,
    @required String paymentId,
    @required String orderNumber,
    @required String currencyCode,
    @required String languageCode,
    @required String paymentMethod,
    @required Duration pageTimeout,
    @required String transactionType,
    @required String merchantReturnUrl,
    @required bool useDebugPaymentUrl,
    String paymentDescription,
    InternetAddress customerIpAddress,
    String customerName,
    String customerEmail,
    String customerPhone,
    String customerMacAddress,
    bool hadCustomerGaveConsent,
    String promotionCode,
    double beforeTaxAmount,
    double taxAmount,
    int eppMonth,
    String cardId,
    String cardHolder,
    String cardNumber,
    DateTime cardExpiry,
    String cardCvv2,
    bool isCardPageEnabled,
    bool isCvvOptional,
    String issuingBank,
    String tokenType,
    String token,
    String pairingToken,
    String requestToken,
    String requestVerifier,
    String pairingVerifier,
    bool isTokenizeRequired,
    String merchantCallbackUrl,
    String merchantApprovalUrl,
    String merchantDisapprovalUrl,
    String checkoutResourceUrl,
    bool shouldTriggerReturnUrl,
    String param6,
    String param7,
    String billingAddress,
    String billingPostalCode,
    String billingCity,
    String billingRegion,
    String billingCountry,
    String shippingAddress,
    String shippingPostalCode,
    String shippingCity,
    String shippingRegion,
    String shippingCountry,
    String sessionId,
    String password,
    String preCheckoutId,
  }) async {
    return _channel.invokeMethod('makePayment', {
      'serviceId': serviceId,
      'amount': amount,
      'merchantName': merchantName,
      'paymentId': paymentId,
      'orderNumber': orderNumber,
      'currencyCode': currencyCode,
      'languageCode': languageCode,
      'paymentMethod': paymentMethod,
      'pageTimeoutSecs': pageTimeout.inSeconds,
      'transactionType': transactionType,
      'merchantReturnUrl': merchantReturnUrl,
      'useDebugPaymentUrl': useDebugPaymentUrl,
      'paymentDescription': paymentDescription,
      'customerIpAddress': customerIpAddress,
      'customerName': customerName,
      'customerEmail': customerEmail,
      'customerPhone': customerPhone,
      'customerMacAddress': customerMacAddress,
      'hadCustomerGaveConsent': hadCustomerGaveConsent,
      'promotionCode': promotionCode,
      'beforeTaxAmount': beforeTaxAmount,
      'taxAmount': taxAmount,
      'eppMonth': eppMonth,
      'cardId': cardId,
      'cardHolder': cardHolder,
      'cardNumber': cardNumber,
      'cardExpiry': cardExpiry == null
          ? null
          : new DateFormat('MM/dd').format(cardExpiry),
      'cardCvv2': cardCvv2,
      'isCardPageEnabled': isCardPageEnabled,
      'isCvvOptional': isCvvOptional,
      'issuingBank': issuingBank,
      'tokenType': tokenType,
      'token': token,
      'pairingToken': pairingToken,
      'requestToken': requestToken,
      'requestVerifier': requestVerifier,
      'pairingVerifier': pairingVerifier,
      'isTokenizeRequired': isTokenizeRequired,
      'merchantCallbackUrl': merchantCallbackUrl,
      'merchantApprovalUrl': merchantApprovalUrl,
      'merchantDisapprovalUrl': merchantDisapprovalUrl,
      'checkoutResourceUrl': checkoutResourceUrl,
      'shouldTriggerReturnUrl': shouldTriggerReturnUrl,
      'param6': param6,
      'param7': param7,
      'billingAddress': billingAddress,
      'billingPostalCode': billingPostalCode,
      'billingCity': billingCity,
      'billingRegion': billingRegion,
      'billingCountry': billingCountry,
      'shippingAddress': shippingAddress,
      'shippingPostalCode': shippingPostalCode,
      'shippingCity': shippingCity,
      'shippingRegion': shippingRegion,
      'shippingCountry': shippingCountry,
      'sessionId': sessionId,
      'password': password,
      'preCheckoutId': preCheckoutId,
    });
  }

  static Future<String> generateId(String prefix) async {
    return _channel.invokeMethod('generateId', prefix);
  }
}
